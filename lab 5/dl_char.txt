#include<bits/stdc++.h>
using namespace std;

#define WHITE 0
#define GRAY 1
#define BLACK 2

int color[1000];
int par[1000];
int n, m;
vector<int> ar[1000];
vector<int>path;

void DFS(int u){
  color[u] = GRAY;
  for (int i = 0; i < ar[u].size(); i++){
    int v = ar[u][i];
    if (color[v] == GRAY){
      // cycle found
      path.push_back(v);
      int temp = u;
      while (temp != v){
        path.push_back(temp);
        temp = par[temp];
      }
      return ;
    }
    else if (color[v] == WHITE){
      par[v] = u;
      DFS(v);
    }
  }
  color[u] = BLACK;
}

int main(){
  cin >> n >> m;
  for (int i = 0; i < m; i++){
    char x, y;
    cin >> x >> y;
    int a = x - 'A' + 1;
    int b = y - 'A' + 1;
    //cout << a << " " << b << endl;
    ar[a].push_back(b);
  }
  for (int i = 1; i <= n; i++){
    if (color[i] == WHITE){
      DFS(i);
    }
  }
  if (path.size() == 0){
    cout << "No deadlock found\n";
  }
  else {
    cout << "Deadlock found\n";
    for (int i = 0; i < path.size(); i++){
      printf("%c ", path[i] + 'A' - 1);
    }
    cout << "\n";
  }
  return 0;
}
